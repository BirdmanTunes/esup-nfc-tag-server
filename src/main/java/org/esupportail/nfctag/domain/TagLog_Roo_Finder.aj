// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.esupportail.nfctag.domain;

import java.util.Date;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import org.esupportail.nfctag.domain.TagLog;

privileged aspect TagLog_Roo_Finder {
    
    public static Long TagLog.countFindTagLogsByAuthDateGreaterThan(Date authDate) {
        if (authDate == null) throw new IllegalArgumentException("The authDate argument is required");
        EntityManager em = TagLog.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM TagLog AS o WHERE o.authDate > :authDate", Long.class);
        q.setParameter("authDate", authDate);
        return ((Long) q.getSingleResult());
    }
    
    public static Long TagLog.countFindTagLogsByAuthDateGreaterThanAndNumeroIdEquals(Date authDate, String numeroId) {
        if (authDate == null) throw new IllegalArgumentException("The authDate argument is required");
        if (numeroId == null || numeroId.length() == 0) throw new IllegalArgumentException("The numeroId argument is required");
        EntityManager em = TagLog.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM TagLog AS o WHERE o.authDate > :authDate  AND o.numeroId = :numeroId", Long.class);
        q.setParameter("authDate", authDate);
        q.setParameter("numeroId", numeroId);
        return ((Long) q.getSingleResult());
    }
    
    public static Long TagLog.countFindTagLogsByLocation(String location) {
        if (location == null || location.length() == 0) throw new IllegalArgumentException("The location argument is required");
        EntityManager em = TagLog.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM TagLog AS o WHERE o.location = :location", Long.class);
        q.setParameter("location", location);
        return ((Long) q.getSingleResult());
    }
    
    public static Long TagLog.countFindTagLogsByNumeroIdEquals(String numeroId) {
        if (numeroId == null || numeroId.length() == 0) throw new IllegalArgumentException("The numeroId argument is required");
        EntityManager em = TagLog.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM TagLog AS o WHERE o.numeroId = :numeroId", Long.class);
        q.setParameter("numeroId", numeroId);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<TagLog> TagLog.findTagLogsByAuthDateGreaterThan(Date authDate) {
        if (authDate == null) throw new IllegalArgumentException("The authDate argument is required");
        EntityManager em = TagLog.entityManager();
        TypedQuery<TagLog> q = em.createQuery("SELECT o FROM TagLog AS o WHERE o.authDate > :authDate", TagLog.class);
        q.setParameter("authDate", authDate);
        return q;
    }
    
    public static TypedQuery<TagLog> TagLog.findTagLogsByAuthDateGreaterThan(Date authDate, String sortFieldName, String sortOrder) {
        if (authDate == null) throw new IllegalArgumentException("The authDate argument is required");
        EntityManager em = TagLog.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM TagLog AS o WHERE o.authDate > :authDate");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<TagLog> q = em.createQuery(queryBuilder.toString(), TagLog.class);
        q.setParameter("authDate", authDate);
        return q;
    }
    
    public static TypedQuery<TagLog> TagLog.findTagLogsByAuthDateGreaterThanAndNumeroIdEquals(Date authDate, String numeroId) {
        if (authDate == null) throw new IllegalArgumentException("The authDate argument is required");
        if (numeroId == null || numeroId.length() == 0) throw new IllegalArgumentException("The numeroId argument is required");
        EntityManager em = TagLog.entityManager();
        TypedQuery<TagLog> q = em.createQuery("SELECT o FROM TagLog AS o WHERE o.authDate > :authDate  AND o.numeroId = :numeroId", TagLog.class);
        q.setParameter("authDate", authDate);
        q.setParameter("numeroId", numeroId);
        return q;
    }
    
    public static TypedQuery<TagLog> TagLog.findTagLogsByAuthDateGreaterThanAndNumeroIdEquals(Date authDate, String numeroId, String sortFieldName, String sortOrder) {
        if (authDate == null) throw new IllegalArgumentException("The authDate argument is required");
        if (numeroId == null || numeroId.length() == 0) throw new IllegalArgumentException("The numeroId argument is required");
        EntityManager em = TagLog.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM TagLog AS o WHERE o.authDate > :authDate  AND o.numeroId = :numeroId");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<TagLog> q = em.createQuery(queryBuilder.toString(), TagLog.class);
        q.setParameter("authDate", authDate);
        q.setParameter("numeroId", numeroId);
        return q;
    }
    
    public static TypedQuery<TagLog> TagLog.findTagLogsByLocation(String location) {
        if (location == null || location.length() == 0) throw new IllegalArgumentException("The location argument is required");
        EntityManager em = TagLog.entityManager();
        TypedQuery<TagLog> q = em.createQuery("SELECT o FROM TagLog AS o WHERE o.location = :location", TagLog.class);
        q.setParameter("location", location);
        return q;
    }
    
    public static TypedQuery<TagLog> TagLog.findTagLogsByLocation(String location, String sortFieldName, String sortOrder) {
        if (location == null || location.length() == 0) throw new IllegalArgumentException("The location argument is required");
        EntityManager em = TagLog.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM TagLog AS o WHERE o.location = :location");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<TagLog> q = em.createQuery(queryBuilder.toString(), TagLog.class);
        q.setParameter("location", location);
        return q;
    }
    
    public static TypedQuery<TagLog> TagLog.findTagLogsByNumeroIdEquals(String numeroId) {
        if (numeroId == null || numeroId.length() == 0) throw new IllegalArgumentException("The numeroId argument is required");
        EntityManager em = TagLog.entityManager();
        TypedQuery<TagLog> q = em.createQuery("SELECT o FROM TagLog AS o WHERE o.numeroId = :numeroId", TagLog.class);
        q.setParameter("numeroId", numeroId);
        return q;
    }
    
    public static TypedQuery<TagLog> TagLog.findTagLogsByNumeroIdEquals(String numeroId, String sortFieldName, String sortOrder) {
        if (numeroId == null || numeroId.length() == 0) throw new IllegalArgumentException("The numeroId argument is required");
        EntityManager em = TagLog.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM TagLog AS o WHERE o.numeroId = :numeroId");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<TagLog> q = em.createQuery(queryBuilder.toString(), TagLog.class);
        q.setParameter("numeroId", numeroId);
        return q;
    }
    
}
